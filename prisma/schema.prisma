generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SocialProfile {
  id               String  @id
  userId           String? @unique
  youtubeChannelId String
  user             User?   @relation(fields: [userId], references: [id])
}

model Clip {
  id       String  @id @default(cuid())
  user_id  String?
  url      String
  query    String?
  title    String
  body     String?
  start_ms Int
  end_ms   Int
  user     User?   @relation(fields: [user_id], references: [id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model SearchQuery {
  id          String   @id @default(cuid())
  query       String
  author      String?
  create_date DateTime @default(now())
  user_id     String?
  user        User?    @relation(fields: [user_id], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  clips         Clip[]
  queries       SearchQuery[]
  sessions      Session[]
  profile       SocialProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
